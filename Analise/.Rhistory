mutate(perc = n / nrow(studies_brca_merge)) -> subtype_brca
colnames(subtype_brca)  <- c("EIGENSTRAT", "N", "Perc" )
suppressWarnings(
ggplot(subtype_brca, aes(x = reorder(subtype_brca$EIGENSTRAT, -subtype_brca$Perc) , y = subtype_brca$Perc )) +
scale_fill_brewer()+
geom_bar(aes(y = subtype_brca$Perc, fill = factor(subtype_brca$Perc)), colour="black", stat="identity") +
geom_text(aes( label = scales::percent(subtype_brca$Perc),  fill = factor(..x..)), stat= "identity", vjust = -.4)+
scale_y_continuous(labels=scales::percent) +
geom_text(data=subtype_brca, aes(x = subtype_brca$EIGENSTRAT, y = subtype_brca$Perc, label = subtype_brca$N),
vjust=1.8,  colour="brown",  size = 4, show_guide = F) +
guides(fill=FALSE) +
ylab("Frequencies") +
xlab("Ancestry of Breast Cancer"))
studies_breast <- read.delim("C:\Users\Ericd\Downloads\BREAST")
studies_breast <- read.delim("C:\Users\Ericd\Downloads\BREAST\DATA_BREAST_CLINICAL.tsv")
studies_breast <- read.delim("C:/Users/Ericd/Downloads/BREAST/DATA_BREAST_CLINICAL.tsv")
colnames(studies_breast) <- gsub("\\_\\_", "\\_", gsub("\\.", "\\_", toupper(colnames(studies_breast))))
ancestry_breast <- read.delim("C:/Users/Ericd/Downloads/BREAST/DATA_BREAST_CLINICAL.tsv", sep=",", na.strings = "Not Available")
colnames(ancestry_breast) <- gsub("\\_\\_", "\\_", gsub("\\.", "\\_", toupper(colnames(ancestry_breast))))
ancestry_breast <- read.delim("C:/Users/Ericd/Downloads/BREAST/DATA_BREAST_CLINICAL.tsv", sep=",", na.strings = "Not Available")
colnames(ancestry_breast) <- gsub("\\_\\_", "\\_", gsub("\\.", "\\_", toupper(colnames(ancestry_breast))))
studies_breast <- studies_breast[, c("PATIENT_ID", "ONCOTREE_CODE", "DIAGNOSIS_AGE",  "BIRTH_FROM_INITIAL_PATHOLOGIC_DIAGNOSIS_DATE","AGE_AT_SURGERY", "DISEASE_FREE_MONTHS_",  "DISEASE_FREE_STATUS", "OVERALL_SURVIVAL_MONTHS_" , "OVERALL_SURVIVAL_STATUS", "DEATH_FROM_INITIAL_PATHOLOGIC_DIAGNOSIS_DATE", "PATIENT_S_VITAL_STATUS", "PERSON_CIGARETTE_SMOKING_HISTORY_PACK_YEAR_VALUE")]
View(studies_breast)
View(studies_breast)
knitr::opts_chunk$set(echo = TRUE)
traceback()  # if error occurred during knit()
studies_brca <- read.delim("./combined_study_clinical_brca.tsv")
studies_brca <- read.delim("C:/Users/Ericd/Downloads/BREAST/DATA_BREAST_CLINICAL.tsv")
colnames(studies_brca) <- gsub("\\_\\_", "\\_", gsub("\\.", "\\_", toupper(colnames(studies_brca))))
studies_brca <- studies_brca[, c("PATIENT_ID", "ONCOTREE_CODE", "CANCER_TYPE_DETAILED", "AGE_AT_DIAGNOSIS", "DISEASE_FREE_EVENT",  "DISEASE_FREE_MONTHS_", "OVERALL_SURVIVAL_MONTHS_", "OVERALL_SURVIVAL_STATUS", "DISEASE_FREE_STATUS", "TIME_TO_DEATH_MONTHS_", "TIME_TO_METASTASIS_MONTHS_", "METASTATIC_RECURRENCE_TIME", "PATIENT_S_VITAL_STATUS", "MEDR_TIME_TO_METASTATIC_DIAGNOSIS_CALCULATED_MONTHS_", "TYPE_OF_BREAST_SURGERY")]
View(studies_brca)
View(studies_brca)
View(studies_brca)
View(ancestry_breast)
View(ancestry_breast)
studies_brca <- read.delim("C:/Users/Ericd/Documents/BREAST/DATA_BREAST_CLINICAL.tsv")
colnames(studies_brca) <- gsub("\\_\\_", "\\_", gsub("\\.", "\\_", toupper(colnames(studies_brca))))
studies_brca <- studies_brca[, c("PATIENT_ID", "ONCOTREE_CODE", "CANCER_TYPE_DETAILED", "AGE_AT_DIAGNOSIS", "DISEASE_FREE_EVENT",  "DISEASE_FREE_MONTHS_", "OVERALL_SURVIVAL_MONTHS_", "OVERALL_SURVIVAL_STATUS", "DISEASE_FREE_STATUS", "TIME_TO_DEATH_MONTHS_", "TIME_TO_METASTASIS_MONTHS_", "METASTATIC_RECURRENCE_TIME", "PATIENT_S_VITAL_STATUS", "MEDR_TIME_TO_METASTATIC_DIAGNOSIS_CALCULATED_MONTHS_", "TYPE_OF_BREAST_SURGERY")]
View(studies_brca)
library(maftools)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
BiocManager::install('TCGAbiolinks') # donwload data of GDC
#if(!require('cgdsr')){install.packages('cgdsr')} # donwload data of cbioportal
if(!require('regexPipes')){install.packages('regexPipes')}
if(!require('rlang')){install.packages('rlang')} # tools to work with core language features of R and the tidyverse
if(!require('tidyverse')){install.packages('tidyverse')} # install all tidyverse packages
library(maftools)
library(TCGAbiolinks)
library(rlang)
library(tidyverse)
library(regexPipes)
# library(data.table) ??
# setwd("/path-to-file-directory")
# maftools_AA_EA.RData contains maf, brca_AA.clin, patients_AA, maf_brca_AA files
# load("maftools_AA_EA.RData")
# descomentar esse comando caso se deseje baixar os dados:
maf <- GDCquery_Maf("BRCA", pipelines = "muse", directory = "GDCdata")
maf_brca <- read.maf(maf = maf, useAll = T)
maf_brca # maf + tumor sample barcode
getSampleSummary(maf_brca)
getGeneSummary(maf_brca)
getClinicalData(maf_brca)
getFields(maf_brca)
# writes maf summary to an output file with basename maf_brca
write.mafSummary(maf = maf_brca, basename = 'maf_brca')
# preparando dados de ancestralidade
patients_AA <- scan("patients_AA", what=list(id=""), sep="\n") # for what?
patients_EA <- scan("patients_EA", what=list(id=""), sep="\n")
maf$Patient_id <- substr(maf$Tumor_Sample_Barcode, 1, 12) # is the same!
samples_AA <- unique(maf$Tumor_Sample_Barcode[maf$Patient_id %in% patients_AA$id])
samples_EA <- unique(maf$Tumor_Sample_Barcode[maf$Patient_id %in% patients_EA$id])
maf_AA <- maf[maf$Tumor_Sample_Barcode %in% samples_AA,] # maf + tumor sample barcode
maf_EA <- maf[maf$Tumor_Sample_Barcode %in% samples_EA,]
maf_brca_AA <- read.maf(maf = maf_AA, useAll = T) # maf + tumor sample barcode
maf_brca_EA <- read.maf(maf = maf_EA, useAll = T) # estava carregando de maf_AA!
mafSurvival(maf = breast_fam.maf, genes = 'TP53', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
mafSurvival(maf = maf_brca_AA, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = TRUE)
View(maf_brca_AA)
head(all.clin$days_to_last_followup)
all.clin <- read.csv('all_clin_indexed.csv',
sep = ",",
header = T,
stringsAsFactors = T) # where does it come from?
head(all.clin$days_to_last_followup)
all.clin$Patient_id <- all.clin$bcr_patient_barcode
all.clin$days_to_last_followup <- all.clin$days_to_last_follow_up
all.clin$Overall_Survival_Status <- all.clin$vital_status
head(all.clin$days_to_last_followup)
as.numeric( head(all.clin$days_to_last_followup))
all.clin$days_to_last_followup <- as.numeric(all.clin$days_to_last_followup)
all.clin$Overall_Survival_Status <- ifelse(all.clin$Overall_Survival_Status =="alive", 0,1)
all.clin$Overall_Survival_Status
Sum(isna(all.clin$vital_status))
sum(isna(all.clin$vital_status))
sum(is.na(all.clin$vital_status))
brca_AA.clin <- all.clin[all.clin$bcr_patient_barcode %in% patients_AA$id,]
brca_EA.clin <- all.clin[all.clin$bcr_patient_barcode %in% patients_EA$id,]
brca_EA.clin <- all.clin[all.clin$bcr_patient_barcode %in% patients_EA$id,]
brca_AA.clin$ancestry <- "AA"
brca_EA.clin$ancestry <- "EA"
brca_AA.clin <- merge(brca_AA.clin, maf_AA[,c("Patient_id","Tumor_Sample_Barcode")], by="Patient_id")
maf_brca_AA <- read.maf(maf = maf_AA, clinicalData = brca_AA.clin, verbose = T)
maf_brca_AA <- read.maf(maf = maf_AA, clinicalData = brca_AA.clin, verbose = T)
maf_brca_EA <- read.maf(maf = maf_EA, clinicalData = brca_EA.clin, verbose = T)
maf_brca_AA <- read.maf(maf = maf_AA, clinicalData = brca_AA.clin, verbose = T)
maf_brca_EA <- read.maf(maf = maf_EA, clinicalData = brca_EA.clin, verbose = T)
brca_EA.clin <- merge(brca_EA.clin, maf_EA[,c("Patient_id","Tumor_Sample_Barcode")], by="Patient_id")
maf_brca_EA <- read.maf(maf = maf_EA, clinicalData = brca_EA.clin, verbose = T)
mafSurvival(maf = maf_brca_AA, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = TRUE)
mafSurvival(maf = maf_brca_AA, genes = 'TP53', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
mafSurvival(maf = maf_brca_EA, genes = 'TP53', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
mafSurvival(maf = maf_brca_EA, genes = 'TP53', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = TRUE)
mafSurvival(maf = maf_brca_EA, genes = 'TP53', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
mafSurvival(maf = maf_brca_AA, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
mafSurvival(maf = maf_brca_AA, genes = 'TP53', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
mafSurvival(maf = maf_brca_EA, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
mafSurvival(maf = maf_brca_EA, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
mafSurvival(maf = maf_brca_AA, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
mafSurvival(maf = maf_brca_AA, genes = 'TP53', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
mafSurvival(maf = maf_brca_AA, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
brca_EA.clin
str(brca_EA.clin)
table(brca_EA.clin$vital_status)
table(brca_EA.clin$Overall_Survival_Status)
fab.ce = clinicalEnrichment(maf = maf_brca_AA, clinicalFeature = 'vital_status')
fab.ce$groupwise_comparision[p_value < 0.05]
plotEnrichmentResults(enrich_res = fab.ce, pVal = 0.05)
fab.ce = clinicalEnrichment(maf = maf_brca_EA, clinicalFeature = 'vital_status')
fab.ce$groupwise_comparision[p_value < 0.05]
plotEnrichmentResults(enrich_res = fab.ce, pVal = 0.05)
fab.ce = clinicalEnrichment(maf = maf_brca_EA, clinicalFeature = 'vital_status')
fab.ce$groupwise_comparision[p_value < 0.05]
plotEnrichmentResults(enrich_res = fab.ce, pVal = 0.05)
fab.ce = clinicalEnrichment(maf = maf_brca, clinicalFeature = 'ancestry')
brca_AA.clin <- all.clin[all.clin$bcr_patient_barcode %in% patients_AA$id,]
brca_EA.clin <- all.clin[all.clin$bcr_patient_barcode %in% patients_EA$id,]
all.clin$ancestry[all.clin$bcr_patient_barcode %in% patients_AA$id,]  <- "AA"
all.clin$ancestry[all.clin$bcr_patient_barcode %in% patients_EA$id,]  <- "EA"
all.clin$ancestry <- "o"
all.clin$ancestry[all.clin$bcr_patient_barcode %in% patients_AA$id,]  <- "AA"
all.clin$ancestry[all.clin$bcr_patient_barcode %in% patients_EA$id,]  <- "EA"
all.clin$ancestry[all.clin$bcr_patient_barcode %in% patients_AA$id]  <- "AA"
all.clin$ancestry[all.clin$bcr_patient_barcode %in% patients_EA$id]  <- "EA"
brca_AA.clin <- merge(brca_AA.clin, maf_AA[,c("Patient_id","Tumor_Sample_Barcode")], by="Patient_id")
brca_EA.clin <- merge(brca_EA.clin, maf_EA[,c("Patient_id","Tumor_Sample_Barcode")], by="Patient_id")
maf_brca_0 <- read.maf(maf = maf, clinicalData= all.clin, verbose = T)  )
maf_brca_0 <- read.maf(maf = maf, clinicalData= all.clin, verbose = T)
all.clin_0 <- merge(all.clin, maf[,c("Patient_id","Tumor_Sample_Barcode")], by="Patient_id")
maf_brca_0 <- read.maf(maf = maf, clinicalData= all.clin_0, verbose = T)
fab.ce = clinicalEnrichment(maf = maf_brca_0, clinicalFeature = 'ancestry')
View(all.clin)
all.clin_1 <- all.clin[all.clin$ancestry != "o",]
table(all.clin_1)
table(all.clin_1$ancestry)
all.clin_1 <- all.clin[all.clin$ancestry == "AA" || all.clin$ancestry == "EA",]
table(all.clin_1$ancestry)
all.clin_1 <- all.clin[all.clin$ancestry == "AA" || all.clin$ancestry == "EA"]
table(all.clin_1$ancestry)
all.clin_1 <- all.clin[all.clin$ancestry == "AA" | all.clin$ancestry == "EA",]
table(all.clin_1$ancestry)
all.clin$ancestry <- "o"
all.clin$ancestry[all.clin$bcr_patient_barcode %in% patients_AA$id]  <- "AA"
all.clin$ancestry[all.clin$bcr_patient_barcode %in% patients_EA$id]  <- "EA"
all.clin_1 <- all.clin[all.clin$ancestry == "AA" | all.clin$ancestry == "EA",]
table(all.clin_1$ancestry)
all.clin <- all.clin[all.clin$ancestry == "AA" | all.clin$ancestry == "EA",]
all.clin_0 <- merge(all.clin, maf[,c("Patient_id","Tumor_Sample_Barcode")], by="Patient_id")
maf_brca_0 <- read.maf(maf = maf, clinicalData= all.clin_0, verbose = T)
fab.ce = clinicalEnrichment(maf = maf_brca_0, clinicalFeature = 'ancestry')
fab.ce$groupwise_comparision[p_value < 0.05]
plotEnrichmentResults(enrich_res = fab.ce, pVal = 0.05)
library(maftools)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
BiocManager::install('TCGAbiolinks') # donwload data of GDC
#if(!require('cgdsr')){install.packages('cgdsr')} # donwload data of cbioportal
if(!require('regexPipes')){install.packages('regexPipes')}
if(!require('rlang')){install.packages('rlang')} # tools to work with core language features of R and the tidyverse
if(!require('tidyverse')){install.packages('tidyverse')} # install all tidyverse packages
library(maftools)
library(TCGAbiolinks)
library(rlang)
library(tidyverse)
library(regexPipes)
# library(data.table) ??
plotmafSummary(maf = maf_brca_AA, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
plotmafSummary(maf = maf_brca_EA, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
oncoplot(maf = maf_brca_EA, top = 10)
print(oncoplot(maf_brca_EA))
oncoplot(maf = maf_brca_AA, top = 10)
print(oncoplot(maf_brca_AA))
somaticInteractions(maf = maf_brca_AA, top = 20, pvalue = c(0.05, 0.1))
print(somaticInteractions)
somaticInteractions(maf = maf_brca_EA, top = 20, pvalue = c(0.05, 0.1))
# Considering only genes which are mutated in at-least in 5 samples in one of the cohort to avoid bias due to genes mutated in single sample.
AA.vs.EA <- mafCompare(m1 = maf_brca_AA, m2 = maf_brca_EA, m1Name = 'AfricanAmerican', m2Name = 'EuropeanAmerican', minMut = 5)
print(AA.vs.EA)
forestPlot(mafCompareRes = AA.vs.EA, pVal = 0.1, color = c('royalblue', 'maroon'), geneFontSize = 0.8)
#Survival analysis based on grouping of DNMT3A mutation status
mafSurvival(maf = maf_brca_AA, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
mafSurvival(maf = maf_brca_EA, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
fab.ce = clinicalEnrichment(maf = maf_brca_AA, clinicalFeature = 'vital_status')
fab.ce$groupwise_comparision[p_value < 0.05]
plotEnrichmentResults(enrich_res = fab.ce, pVal = 0.05)
fab.ce = clinicalEnrichment(maf = maf_brca_EA, clinicalFeature = 'vital_status')
fab.ce$groupwise_comparision[p_value < 0.05]
plotEnrichmentResults(enrich_res = fab.ce, pVal = 0.05)
fab.ce = clinicalEnrichment(maf = maf_brca_0, clinicalFeature = 'ancestry')
fab.ce$groupwise_comparision[p_value < 0.05]
plotEnrichmentResults(enrich_res = fab.ce, pVal = 0.05)
fab.ce = clinicalEnrichment(maf = maf_brca_0, clinicalFeature = 'tumor_stage')
fab.ce$groupwise_comparision[p_value < 0.05]
plotEnrichmentResults(enrich_res = fab.ce, pVal = 0.05)
plotEnrichmentResults(enrich_res = fab.ce, pVal = 0.003)
OncogenicPathways(maf = maf_brca_AA)
OncogenicPathways(maf = maf_brca_EA)
if(!require(magrittr)) { install.packages("magrittr") }
if(!require(UpSetR)) { BiocManager::install("UpSetR") }
if(!require(clusterProfiler)) { BiocManager::install("clusterProfiler") }
if(!require(pathview)) { BiocManager::install("pathview") }
d_AA <- read.csv("edgeR_res_AA.tsv", sep = "\t")
d_AA <- read.csv("edgeR_res_AA.tsv", sep = "\t")
## assume that colname is ID an 4th column is fold change
geneList_AA <- data.frame(SYMBOL=row.names(d_AA), logFC=d_AA[,5])
geneList_AA <- geneList_AA[abs(geneList_AA$logFC) > 2, c('SYMBOL', 'logFC')]
geneList_AA_entrez <- bitr(geneList_AA$SYMBOL, fromType="SYMBOL", toType='ENTREZID', OrgDb=org.Hs.eg.db)
install.packages('bitr')
install.packages('bitr')
if(!require(magrittr)) { install.packages("magrittr") }
if(!require(UpSetR)) { BiocManager::install("UpSetR") }
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
BiocManager::install('TCGAbiolinks') # donwload data of GDC
#if(!require('cgdsr')){install.packages('cgdsr')} # donwload data of cbioportal
if(!require('regexPipes')){install.packages('regexPipes')}
if(!require('rlang')){install.packages('rlang')} # tools to work with core language features of R and the tidyverse
if(!require('tidyverse')){install.packages('tidyverse')} # install all tidyverse packages
library(maftools)
library(TCGAbiolinks)
library(rlang)
library(tidyverse)
library(regexPipes)
# library(data.table) ??
if(!require(magrittr)) { install.packages("magrittr") }
if(!require(UpSetR)) { BiocManager::install("UpSetR") }
if(!require(clusterProfiler)) { BiocManager::install("clusterProfiler") }
if(!require(pathview)) { BiocManager::install("pathview") }
d_AA <- read.csv("edgeR_res_AA.tsv", sep = "\t")
## assume that colname is ID an 4th column is fold change
geneList_AA <- data.frame(SYMBOL=row.names(d_AA), logFC=d_AA[,5])
geneList_AA <- geneList_AA[abs(geneList_AA$logFC) > 2, c('SYMBOL', 'logFC')]
geneList_AA_entrez <- bitr(geneList_AA$SYMBOL, fromType="SYMBOL", toType='ENTREZID', OrgDb=org.Hs.eg.db)
install.packages('bitr')
library(maftools)
library(TCGAbiolinks)
library(TCGAbiolinks)
library(rlang)
library(tidyverse)
library(regexPipes)
d_AA <- read.csv("edgeR_res_AA.tsv", sep = "\t")
## assume that colname is ID an 4th column is fold change
geneList_AA <- data.frame(SYMBOL=row.names(d_AA), logFC=d_AA[,5])
geneList_AA <- geneList_AA[abs(geneList_AA$logFC) > 2, c('SYMBOL', 'logFC')]
geneList_AA_entrez <- bitr(geneList_AA$SYMBOL, fromType="SYMBOL", toType='ENTREZID', OrgDb=org.Hs.eg.db)
install.packages('bitr')
fab.ce = clinicalEnrichment(maf = maf_brca_EA, clinicalFeature = 'vital_status')
fab.ce$groupwise_comparision[p_value < 0.05]
plotEnrichmentResults(enrich_res = fab.ce, pVal = 0.05)
library(maftools)
library(TCGAbiolinks)
library(rlang)
library(tidyverse)
library(regexPipes)
install.packages("bitr")
instif(!require(magrittr)) { install.packages("magrittr") }
if(!require(magrittr)) { install.packages("magrittr") }
if(!require(magrittr)) { install.packages("magrittr") }
if(!require(UpSetR)) { BiocManager::install("UpSetR") }
if(!require(clusterProfiler)) { BiocManager::install("clusterProfiler") }
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
if(!require(magrittr)) { install.packages("magrittr") }
if(!require(UpSetR)) { BiocManager::install("UpSetR") }
if(!require(clusterProfiler)) { BiocManager::install("clusterProfiler") }
if(!require(pathview)) { BiocManager::install("pathview") }
d_AA <- read.csv("edgeR_res_AA.tsv", sep = "\t")
## assume that colname is ID an 4th column is fold change
geneList_AA <- data.frame(SYMBOL=row.names(d_AA), logFC=d_AA[,5])
geneList_AA <- geneList_AA[abs(geneList_AA$logFC) > 2, c('SYMBOL', 'logFC')]
geneList_AA_entrez <- bitr(geneList_AA$SYMBOL, fromType="SYMBOL", toType='ENTREZID', OrgDb=org.Hs.eg.db)
geneList_AA <- merge(geneList_AA, geneList_AA_entrez, by="SYMBOL")
row.names(geneList_AA) <- geneList_AA$ENTREZID
geneList_AA$ENTREZID <- NULL
geneList_AA$SYMBOL <- NULL
library("pathview")
map05224_AA <- pathview(gene.data  = geneList_AA,
pathway.id = "05224", #
map.symbol = TRUE,
species    = "hsa",
limit      = list(gene=max(abs(geneList)), cpd=1),
out.suffix = "AA"
)
library("pathview")
map05224_AA <- pathview(gene.data  = geneList_AA,
pathway.id = "05224", #
map.symbol = TRUE,
species    = "hsa",
limit      = list(gene=max(abs(geneList_AA)), cpd=1),
out.suffix = "AA"
)
d_EA <- read.csv("edgeR_res_EA.tsv", sep = "\t")
## assume that colname is ID an 4th column is fold change
geneList_EA <- data.frame(SYMBOL=row.names(d_EA), logFC=d_EA[,5])
geneList_EA <- geneList_EA[abs(geneList_EA$logFC) > 2, c('SYMBOL', 'logFC')]
geneList_EA_entrez <- bitr(geneList_EA$SYMBOL, fromType="SYMBOL", toType='ENTREZID', OrgDb=org.Hs.eg.db)
geneList_EA <- merge(geneList_EA, geneList_EA_entrez, by="SYMBOL")
row.names(geneList_EA) <- geneList_EA$ENTREZID
geneList_EA$ENTREZID <- NULL
geneList_EA$SYMBOL <- NULL
library("pathview")
map05224_EA <- pathview(gene.data  = geneList_EA,
pathway.id = "05224", # 052
map.symbol = TRUE,
species    = "hsa",
limit      = list(gene=max(abs(geneList_EA)), cpd=1),
out.suffix = "EA")
library("pathview")
map05224_EA <- pathview(gene.data  = geneList_EA,
pathway.id = "05224", # 052
map.symbol = TRUE,
species    = "hsa",
# limit      = list(gene=max(abs(geneList_EA)), cpd=1),
out.suffix = "EA")
library("pathview")
map05224_EA <- pathview(gene.data  = geneList_EA,
pathway.id = "05224", # 052
map.symbol = TRUE,
species    = "hsa",
limit      = list(gene=max(abs(geneList_EA)), cpd=1),
out.suffix = "EA")
library("pathview")
map05224_EA <- pathview(gene.data  = geneList_EA,
pathway.id = "05224", # 052
map.symbol = TRUE,
species    = "hsa",
# limit      = list(gene=max(abs(geneList_EA)), cpd=1),
out.suffix = "EA")
library("pathview")
map05224_AA <- pathview(gene.data  = geneList_AA,
pathway.id = "05224", #
map.symbol = TRUE,
species    = "hsa",
out.suffix = "AA"
)
View(geneList_AA)
View(geneList_AA_entrez)
View(geneList_AA)
d_EA
View(d_AA)
forestPlot(mafCompareRes = AA.vs.EA, pVal = 0.05, color = c('royalblue', 'maroon'), geneFontSize = 0.8)
#Survival analysis based on grouping of DNMT3A mutation status
mafSurvival(maf = maf_brca_AA, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
mafSurvival(maf = maf_brca_EA, genes = 'PIK3CA', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
mafSurvival(maf = maf_brca_EA, genes = 'TP53', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
#Survival analysis based on grouping of DNMT3A mutation status
mafSurvival(maf = maf_brca_AA, genes = 'TP53', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = FALSE)
View(brca_AA.clin)
library(readr)
combined_study_clinical_data <- read_delim("C:/Users/Ericd/Downloads/combined_study_clinical_data.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(combined_study_clinical_data)
View(combined_study_clinical_data)
View(combined_study_clinical_data)
View(all.clin)
combined_study_clinical_data[,c("Subtype","Patient ID")]
subtypedata <- combined_study_clinical_data[,c("Subtype","Patient ID")]
View(subtypedata)
subtypedata <- combined_study_clinical_data[,c("Patient ID","Subtype")]
View(subtypedata)
View(combined_study_clinical_data)
subtypedata <- combined_study_clinical_data[,c("Patient ID","Subtype","Pam50 + Claudin-low subtype")]
View(studies_breast)
View(all.clin)
View(studies_breast)
View(all.clin)
View(combined_study_clinical_data)
GDCquery_clinic("TCGA-BRCA", type = "clinical", save.csv = TRUE)
library(TCGAbiolinks)
GDCquery_clinic("TCGA-BRCA", type = "clinical", save.csv = TRUE)
BRCA_clin  <- GDCquery_clinic("TCGA-BRCA", type = "clinical", save.csv = TRUE)
View(BRCA_clin)
BRCA_clin_bio  <- GDCquery_clinic("TCGA-BRCA", type = "biospecimen", save.csv = TRUE)
View(BRCA_clin_bio)
subtypedata <- brca_tcga_pan_can_atlas_2018_clinical_data[,c("Patient ID","Subtype")]
subtypedata <- brca_tcga_pan_can_atlas_2018_clinical_data[,c("Patient ID","Subtype")]
subtypedata <- brca_tcga_pan_can_atlas_2018_clinical_data[,c("Patient ID","Subtype")]
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
BiocManager::install('TCGAbiolinks') # donwload data of GDC
#if(!require('cgdsr')){install.packages('cgdsr')} # donwload data of cbioportal
if(!require('regexPipes')){install.packages('regexPipes')}
if(!require('rlang')){install.packages('rlang')} # tools to work with core language features of R and the tidyverse
if(!require('tidyverse')){install.packages('tidyverse')} # install all tidyverse packages
library(maftools)
library(TCGAbiolinks)
load("C:/Users/Ericd/Downloads/rosalind_ini.txt")
count = myseq.count("A")
myseq.count(A)
myseq = ("CCACATATTGATTGCAACTCTGGTTTGAACTTTTCCGAACCGACTTCCGTGTAACATGCGGGATCAAAGCTGTTAACTCGGTGACCGGGCCTAACGGGTATCTGCAAAACATACCCTATGCGTTTCGTCTTGCCGGGCCCAGGGTAGATTAAGTAACATTAGGTCAACACATGGGCAACGTCAGGCGGAATTTGCAGACTATGGGTGTCCTGATCCTTTGCCCCTCGTTACAACATAGGGGCAGATAGGTCCTGTCTTCTATGCGAATGTCGGCCGTGGCGCCGATATAAGCTCATCATGTCTTTGTGTTTAGCGTCGGCATGGATACTCCTCAAAGTCTGTCGTTTGCGCGAACGGTTACTGGGCTCGCTCTACACTAGTCTTAGACGAATGCATTACGTTAGTGGTGTCCGTTGCTAGCTGATTGCAAACTGACATCGGGTCCAGCGTTGGACTTCAAGATACTACAAGTCACGCTTTAGCGCTGTAATTAGCATACCTAGGCTAACCACACCCGGATATGATGTACGACCATATCCATAGCAATACTATGCGAGCACAAACGACCCAAGCGATACCTGCACCGATTGACGAAATCGGACCGCGTAATAGTATATAATAACGTACGGCTGATCTCGGCATAGTGAGGTTGCAACTCGGTTCTGACGTCCTGTCGTCATCTTAATGGCGCGTTATCCTGAGGACAAGATATGGGCAGGGCAGCGAAATGACCCCCGCCATCGGTCGTTACGTTACCATGTTCTAAATGGTCGTAAAGGCCGCCAATTCCGCACGAGTCCACGTCCCAGACGTATGTCTTTACTCCGTCTGAAAACG")
myseq.count("A")
print(a)
int a
myseq => ("CCACATATTGATTGCAACTCTGGTTTGAACTTTTCCGAACCGACTTCCGTGTAACATGCGGGATCAAAGCTGTTAACTCGGTGACCGGGCCTAACGGGTATCTGCAAAACATACCCTATGCGTTTCGTCTTGCCGGGCCCAGGGTAGATTAAGTAACATTAGGTCAACACATGGGCAACGTCAGGCGGAATTTGCAGACTATGGGTGTCCTGATCCTTTGCCCCTCGTTACAACATAGGGGCAGATAGGTCCTGTCTTCTATGCGAATGTCGGCCGTGGCGCCGATATAAGCTCATCATGTCTTTGTGTTTAGCGTCGGCATGGATACTCCTCAAAGTCTGTCGTTTGCGCGAACGGTTACTGGGCTCGCTCTACACTAGTCTTAGACGAATGCATTACGTTAGTGGTGTCCGTTGCTAGCTGATTGCAAACTGACATCGGGTCCAGCGTTGGACTTCAAGATACTACAAGTCACGCTTTAGCGCTGTAATTAGCATACCTAGGCTAACCACACCCGGATATGATGTACGACCATATCCATAGCAATACTATGCGAGCACAAACGACCCAAGCGATACCTGCACCGATTGACGAAATCGGACCGCGTAATAGTATATAATAACGTACGGCTGATCTCGGCATAGTGAGGTTGCAACTCGGTTCTGACGTCCTGTCGTCATCTTAATGGCGCGTTATCCTGAGGACAAGATATGGGCAGGGCAGCGAAATGACCCCCGCCATCGGTCGTTACGTTACCATGTTCTAAATGGTCGTAAAGGCCGCCAATTCCGCACGAGTCCACGTCCCAGACGTATGTCTTTACTCCGTCTGAAAACG")
a = 0
myseq = ("CCACATATTGATTGCAACTCTGGTTTGAACTTTTCCGAACCGACTTCCGTGTAACATGCGGGATCAAAGCTGTTAACTCGGTGACCGGGCCTAACGGGTATCTGCAAAACATACCCTATGCGTTTCGTCTTGCCGGGCCCAGGGTAGATTAAGTAACATTAGGTCAACACATGGGCAACGTCAGGCGGAATTTGCAGACTATGGGTGTCCTGATCCTTTGCCCCTCGTTACAACATAGGGGCAGATAGGTCCTGTCTTCTATGCGAATGTCGGCCGTGGCGCCGATATAAGCTCATCATGTCTTTGTGTTTAGCGTCGGCATGGATACTCCTCAAAGTCTGTCGTTTGCGCGAACGGTTACTGGGCTCGCTCTACACTAGTCTTAGACGAATGCATTACGTTAGTGGTGTCCGTTGCTAGCTGATTGCAAACTGACATCGGGTCCAGCGTTGGACTTCAAGATACTACAAGTCACGCTTTAGCGCTGTAATTAGCATACCTAGGCTAACCACACCCGGATATGATGTACGACCATATCCATAGCAATACTATGCGAGCACAAACGACCCAAGCGATACCTGCACCGATTGACGAAATCGGACCGCGTAATAGTATATAATAACGTACGGCTGATCTCGGCATAGTGAGGTTGCAACTCGGTTCTGACGTCCTGTCGTCATCTTAATGGCGCGTTATCCTGAGGACAAGATATGGGCAGGGCAGCGAAATGACCCCCGCCATCGGTCGTTACGTTACCATGTTCTAAATGGTCGTAAAGGCCGCCAATTCCGCACGAGTCCACGTCCCAGACGTATGTCTTTACTCCGTCTGAAAACG");
## This chunk automatically generates a text .R version of this script when running within knitr.
input  = knitr::current_input()  # filename of input document
output = paste(tools::file_path_sans_ext(input), 'R', sep = '.')
knitr::purl(input,output,documentation=2,quiet=T)
# Avoid duplicate label error of knitr::purl
options(knitr.duplicate.label = 'allow')
# Code to browse the markdown file with renderized images.
knitr::opts_chunk$set(
fig.path = "figs/render-"
)
# Set the packages of interest
packages = c("tidyverse","skimr","finalfit", "caret", "ggplot2", "plotROC",  "gapminder", "ggstatsplot")
# if a package is installed, it will be loaded
# otherwise, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
## This chunk automatically generates a text .R version of this script when running within knitr.
input  = knitr::current_input()  # filename of input document
output = paste(tools::file_path_sans_ext(input), 'R', sep = '.')
knitr::purl(input,output,documentation=2,quiet=T)
# Avoid duplicate label error of knitr::purl
options(knitr.duplicate.label = 'allow')
# Code to browse the markdown file with renderized images.
knitr::opts_chunk$set(
fig.path = "figs/render-"
)
## This chunk automatically generates a text .R version of this script when running within knitr.
input  = knitr::current_input()  # filename of input document
output = paste(tools::file_path_sans_ext(input), 'R', sep = '.')
knitr::purl(input,output,documentation=2,quiet=T)
# Avoid duplicate label error of knitr::purl
options(knitr.duplicate.label = 'allow')
# Code to browse the markdown file with renderized images.
knitr::opts_chunk$set(
fig.path = "figs/render-"
)
## This chunk automatically generates a text .R version of this script when running within knitr.
input  = knitr::current_input()  # filename of input document
## This chunk automatically generates a text .R version of this script when running within knitr.
input  = knitr::current_input()  # filename of input document
output = paste(tools::file_path_sans_ext(input), 'R', sep = '.')
knitr::purl(input,output,documentation=2,quiet=T)
# Avoid duplicate label error of knitr::purl
options(knitr.duplicate.label = 'allow')
# Code to browse the markdown file with renderized images.
knitr::opts_chunk$set(
fig.path = "figs/render-"
)
install.packages("evaluate")
install.packages("Rtools")
install.packages("Rtools")
## This chunk automatically generates a text .R version of this script when running within knitr.
input  = knitr::current_input()  # filename of input document
output = paste(tools::file_path_sans_ext(input), 'R', sep = '.')
knitr::purl(input,output,documentation=2,quiet=T)
# Avoid duplicate label error of knitr::purl
options(knitr.duplicate.label = 'allow')
# Code to browse the markdown file with renderized images.
knitr::opts_chunk$set(
fig.path = "figs/render-"
)
# Set the packages of interest
packages = c("tidyverse","skimr","finalfit", "caret", "ggplot2", "plotROC",  "gapminder", "ggstatsplot")
# if a package is installed, it will be loaded
# otherwise, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
suppressMessages(library("tidyverse"))
rm(packages)
setwd(".")
setwd("~/gene_signature-master/differential_gene_expression")
load("C:/Users/Ericd/Documents/gene_signature-master/differential_gene_expression/clinical.tsv")
setwd("~/gene_signature-master/differential_gene_expression")
load("C:/Users/Ericd/Documents/gene_signature-master/differential_gene_expression/kirp_tcga_pan_can_atlas_2018_clinical_data")
load("C:/Users/Ericd/Documents/gene_signature-master/differential_gene_expression/kirp_tcga_pan_can_atlas_2018_clinical_data.tsv")
data_sample_type <- ("C:/Users/Ericd/Documents/gene_signature-master/differential_gene_expression/kirp_tcga_pan_can_atlas_2018_clinical_data.tsv")
data_sample_type <- data_description %>%
filter(prior_diagnosis %in% c("no", "yes","yes, History Of Synchronous And Or Bilateral Malignancy")) %>%
droplevels()
data_sample_type <- read.csv("C:/Users/Ericd/Documents/gene_signature-master/differential_gene_expression/kirp_tcga_pan_can_atlas_2018_clinical_data.tsv")
data_sample_type <- read.delim("C:/Users/Ericd/Documents/gene_signature-master/differential_gene_expression/kirp_tcga_pan_can_atlas_2018_clinical_data.tsv", delim = "\")
data_sample_type <- import("C:/Users/Ericd/Documents/gene_signature-master/differential_gene_expression/kirp_tcga_pan_can_atlas_2018_clinical_data.tsv")
data_diagnoses <- import("C:/Users/Ericd/Documents/gene_signature-master/differential_gene_expression/kirp_tcga_pan_can_atlas_2018_clinical_data.tsv")
